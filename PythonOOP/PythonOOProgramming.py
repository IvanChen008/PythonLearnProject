class SingleStudent(object):
    def __init__(self,name,score):
        self.__name = name
        self.__score = score
    
    def print_score(self):
        print('%s: %s' %(self.__name,self.__score))

sss = SingleStudent("sgagasd",415)
sss.print_score()
print("%s" %sss.name)
print("%s" %sss.__score)

# 面向对象编程
'''
    面向对象编程-Object Oriented Programming，简称OOP,是一种编程思想。OOP把对象作为程序的基本单元，
    一个对象包含了数据和操作的函数。
    面向过程的程序设计吧计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过
    程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。
    面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理
    这些消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。
    在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中
    的Class的概念。

    面向对象的设计思想是从自然界中来的，因为在自然界中，类(Class)和实例(Instance)的概念是很自然的。
    Class是一种抽象概念，而Instance则是一个个具体的实体。
    所以面向对象的设计思想是抽象出Class，根据Class创建Instance。面向对象的抽象程度又比函数高，因为一
    个Class既包含数据，又包含操作数据的方法。
'''
# 类和实例
'''
    面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，而实例是根据类创建
    出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。
    class Something(object):
        def __init__(self,name):
            self.name = name
        
    class后面紧接着是类名，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，
    通常，如果没有合适的继承类就使用object类，这是所有类都会继承的类。因此，可以在创建实例的时候，把一
    些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的__init__方法，在创建实例的时候，就把属性绑
    上去。
    类的方法第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到
    self,因为self就指向创建的实例本身。因此，在__init__方法内部，就可以把各种，属性绑定到self,因为self
    就指向创建的实例本身。
    有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但是
    self不需要传，Python解释器自己会把实例变量传进去。
    和普通函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传
    递该参数。除此之外，类的方法和普通函数没什么区别，所以你仍然可以用默认参数、可变参数、关键字参数和命
    名关键字参数。

'''
#  数据封装
'''
    面向对象编程的一个重要特点就是数据封装。每个实例拥有各自的数据，我们可以通过函数来访问这些数据。
    如果实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在类的内部定义函数
    访问数据，这样就把数据给封装起来了。这些封装数据的函数是和类本身关联起来的，我们称之为类方法。
    要定一个方法，除了第一个参数self外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，
    除了self不用传递，其他参数正常传入。
    这样依赖，我们从外部看一个类，就只需要知道，创建实例需要给出初始函数__init__方法的必要参数，如何
    执行类方法都在类的内部定义，这些数据和逻辑被封装起来了调用很容易，但是却不知道内部实现的细节。封装
    的另一个好处是可以给类增加新的方法。
'''
# 小结
'''
    类是创建实例的模版，而实例则是一个个具体的对象，各个实例拥有的数据都互相独立，互不影响。

    方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；

    通过实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。

    和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个
    类的不同实例，但拥有的变量名称都可能不同。
'''
# 访问限制
'''
    在Class的内部，可以有属性和方法，而外部代码可已通过直接调用实例变量的方法来操作数据，这样，就隐藏
    了内部的复杂逻辑。
    为了限制外部操作随意的修改内部数据，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名
    如果以__（两个下划线）开头，就变成了一个私有变量（Private）。只有内部可以访问，外部不能访问。
    这样就确保了外部代码不能随意改修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。
    如果外部需要使用内部的数据，就需要建立getter的方法。要设置内部数据就需要setter方法。使用方法的好处
    就是可以对设置的参数，进行检查，避免传入无效的参数。

    需要注意，在Python中，变量名类似__xxx__（以双下划线开头，并以双下划线结尾）的是特殊变量，特殊变量
    是可以直接访问，不是private变量。所以在定义数据相关的变量不能使用这样格式的变量名。
    有些时候，你会看到以一个下划线开头的实例变量名，这样的实例变量外部是可以访问的，但是按照约定俗成的
    规定，当你看到这样的变量，意思就是：“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问。”
    双下划线开头的实例变量其实也可以直接从外部访问，只是解释器把__xx(私有变量名)改成了_Class__name，
    所以我们仍然可以通过_Class__name来访问__name 变量。
    但是不同的Python版本解释器可能会把__name改成不同的变量名。总的来说就是，Python本身没有任何机制阻
    止你这么做，需要你自己的遵守规则。

    注意一种错误，
    最后注意下面的这种错误写法：
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    >>> bart = Student('Bart Simpson', 59)
    >>> bart.get_name()
    'Bart Simpson'
    >>> bart.__name = 'New Name' # 设置__name变量！
    >>> bart.__name
    'New Name'

    表面上看，外部代码“成功”地设置了__name变量，但实际上这个__name变量和class内部的__name变量不是一
    个变量！内部的__name变量已经被Python解释器自动改成了_Student__name，而外部代码给bart新增了一个
    __name变量。不信试试：

    >>> bart.get_name() # get_name()内部返回self.__name
    'Bart Simpson'
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'''
# 继承和多态
'''
    在OOP程序设计中，当我们定一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass）
    而被继承的class称为基类、父类或超类(Base class、Super class)。
    当子类和父类都存在相同的方法时，我们说子类的方法覆盖了父类的方法，在代码运行时，总会调用子类的方法，
    这样我们就获得了继承的另一个好处：多态。
    要理解什么是多态，我们首相要对数据类型再做一点说明。当我们定义一个class的时候，我们实际上就定义了一
    种数据类型。我们定义的数据类型和Python自带的数据类型没什么两样。
    这里如果需要判断一个变量是否是某个类型，可以使用isinstance()判断。
    在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以看做是父类。但是如果反过来就不
    行。
    多态的好处就是当我们需要传入子类...的时候，我们只需要接收继承的父类就可以了。因为所有继承的子类都是
    父类的类型，然后按照相应的类型操作就可以了。而由于父类有某个方法，传入任意的子类型都会调用实际类型的
    对应的某个方法，这就是多态的意思。
    对于一个变量呢，只需要知道他是父类的数据类型无需确切地知道它的子类型，就可以放心地调用父类具有的方法。
    而具体调用的那个方法是作用在子类对象的那个对象上，将由运行时该对象的确切类型决定，这就是多态的威力：
    调用方只管调用不管细节，而当我们新增一种子类的时候，只要确保覆写的方法编写没有问题，不管原来的代码
    如何调用。这就是著名的“开闭”原则。
    对扩展开放：允许新增新的父类型的子类；
    对修改封闭：不需要修改依赖父类型的对应执行的方法。
    继承还可以一级一级的继承下来，而任何类，最终都可以追溯到根类Object，这些继承关系看上去就像一颗倒着的
    树。
'''
# 静态语言 VS 动态语言
'''
    对于静态语言来说，如果需要传入确定某个父类的类型，则传入的对象必须是父类型或者它的子类，否则，将无法
    调用该使用多态特性的方法。
    对于Python这种动态语言来说，则不一定不要传入父类型。我们只需要保证传入的对象有一个要调用的方法就可以了。
    这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要看起来像鸭子，走起来像鸭子那它就
    可以被看做是鸭子。
    Python的“file-like Object”就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。但是
    许多对象，只要有read()方法，都被视为“file-like Object”。许多函数接受的参数就是“file-like Object”，
    你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。
'''
# 小结：
'''
    继承可以把父类的所有功能都直接拿来过来，这样不需要从零做起，子类只需要新增自己持有的方法，也可以把父类
    不适合的方法覆盖重写。动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。
'''
# 获取对象的信息
'''
    当我们拿到一个对象的引用时，可以通过什么方法来判断对象类型呢？
    使用type()
    使用isinstance()总是优先使用isinstance()判断类型，可以将指定类型及其子类一网打尽。
    使用dir()
    如果要获得一个对象的所有属性和方法，可以使用dir()函数，他返回一个包含所有属性和方法的字符串的list。
    但是仅仅把属性方法列出来是不够的，配合getattr(),setattr()以及hasattr(),我们可以直接操作一个对象的状态。
    getattr()如果试图获取不存在的属性就会报错，抛出AttributeError的错误。
    getattr(obj,'a',143)可以传入一个default参数，如果属性不存在，就返回默认值。
'''
# 小结：
'''
    通过内置的一系列函数，我们可以对任意一个Python对象进行剖析，拿到其内部数据。但是要注意，只有在不知道对象、
    信息的时候，我们才会去获取对象信息。如果知道就直接调用就可以了。
    假设我们希望从文件流fp中读取图像，我们首先要判断该fp对象是否存在read方法，如果存在，则该对象是一个流，如果
    不存在，则无法读取。这时候就可以使用hasattr()方法了。
    请注意，在Python这类动态语言中，根据鸭子类型，有read()方法，不代表fp对象就是一个文件流，它也可能是网络流，
    也可能是内存中的一个字节流，只要read()方法返回的是有效的图像数据，就不影响读取图像的功能。
'''
# 实例属性和类属性
'''
    由于Python是动态语言，根据类创建的实例可以任意绑定属性。给实例绑定属性的方法是通过实例变量，或者通过self变量。
    但是，如果一个类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归类本身所有。当我们定义
    一个类属性之后，这个属性虽然归类所有，但类的所有实例都可以访问到。
    在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同的名字实例属性会屏蔽掉类属性，但是当你删除
    实例属性后，再使用相同的名称访问到的是类属性。
'''