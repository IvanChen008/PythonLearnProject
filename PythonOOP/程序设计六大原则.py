# ==========================
# 程序设计六大原则
# ==========================
"""
    1、单一职责
        简单来说单一职责就是一个类只负责一个功能。更加具体的说就是对一个类而言，应该是一组相关性很高的函数、数据的封装，是高内聚低耦合的，
        对外界而言应该仅有一个引起它变化的原因。

        单一职责在项目中的使用：
            1、项目中的新手引导变量的管理可以统一在各自的model中用单独的类来管理
            2、MVP模式P层生命周期与V层生命周期的同步可以用单独的包装类来实现。
            3、各种基础框架功能的定义，例如，图片的加载、缓存、显示等都应该在各自的类中去做。
    2、开闭原则
        开闭原则的英文全称是Open close Principle缩写即OCP。开闭原则定义是：软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改是封闭的。
        在软件的声明周期中，因为变化、升级和维护等原因需要对软件的原有代码进行修改时，可能将错误的代码引入，从而破坏了原有的系统。因此当软件需求发生变化时，
        我们应该尽量通过扩展的方式来实现变化，而不是通过修改已经有了的代码。

        开闭原则在项目中的使用：
            1、基类与子类，子类可以继承父类并扩展父类的功能
            2、接口与实现类，接口定义功能，实现类按照各自需求实现。
    3、里氏替换原则
        里氏替换原则原则的定义：如果对每一个类型为S的对象O1，都有类型为T的对象O2，程序P在所有的对象O1都带换成O2时，程序的P的行为没有发生变化，那么类型S是
        类型T的子类换言之就是所有引用基类的地方必须能够透明的使用其子类对象。更通俗的讲就是只要父类出现的地方子类就可以出现，而且替换为子类也不会产生任何的
        错误或者异常。
        里氏替换原则的核心是抽象，而抽象又依赖于继承这个特性，在OOP中，继承的优点缺点都相当明显。

        优点：
            1、代码重用，减少创建类的成本，每个子类都拥有父类的方法和属性
            2、子类和父类基本相似，但又与父类有所区别
            3、提高代码的可扩展性
        缺点：
            1、继承是侵入性的，只要继承就必须拥有父类的方法和属性
            2、可能造成子类代码冗余，灵活性降低，因为子类必须拥有父类的属性和方法。
    4、依赖倒置原则
        依赖倒置原则指定的了一种特定的解耦形式，使得高层次的模块不依赖与低层次模块的实现细节的目的，依赖模块被颠倒了。依赖倒置原则有以下几个关键点：
            1、高层模块不应该依赖于低层模块，两者都应该依赖其抽象
            2、抽象不应该依赖于细节
            3、细节应该依赖于抽象
        在Java语言中，抽象就是指接口或者抽象类，二者都是不能够被直接实例化的：细节就是实现类，实现接口或者抽象类而产生的类就是细节，其特点就是可以直接被实例化，
        也就是可以使用关键new产生一个对象。高层模块就是只调用端，底层模块就是指具体的实现类。依赖倒置原则在Java语言中变现就是：模块间的依赖通过抽象产生，实现类
        之间不发生直接的依赖关系其依赖关系是通过接口或者抽象类产生的。使用一句话概括就是：面向接口编程或者面向抽象编程。
        如果类与类直接依赖细节，那么这几个类之间就有直接的耦合，当具体的需求发生变化时，意味着同时修改依赖者的代码。
    5、接口隔离原则
        接口隔离原则的定义是：客户端不应该依赖于他不需要的接口。另一种定义是：类之间的依赖关系应该建立在最小的接口上。接口隔离原则将非常庞大，臃肿的接口拆分成
        更小的和更具体的接口，这样客户端将会值需要知道他们感兴趣的方法。接口隔离原则的目的是系统解开耦合，从而容易重构、更改和部署。
    6、迪米特原则
        迪米特原则：一个对象应该对其他对象有最少的了解，通俗的讲，一个类应该对自己需要耦合或调用的类知道的最少，类的内部如何实现与调用者或者依赖者没有关系，
        调用者或者依赖者只需要知道他需要的方法即可，其他的一概不管。类与类之间的关系越密切，耦合度越大，当一个类发生变化的时候，对另一个类影响就越大。

    小结：
        在应用开发过程中，最难的不是完成应用的开发工作，而是在后续的升级、维护过程中让应用系统能够拥抱变化。拥抱变化也意味着在满足需求而且不破坏系统稳定的前提下
        保持高可扩展性、高内聚、低耦合，在经历了各个版本的变更之后依然保持着清晰、灵活、稳定的系统架构。
"""