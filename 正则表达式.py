'''
字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是
合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难
以复用。
正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，
凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。

在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：
    '00\d'可以匹配'007'，但无法匹配'00A'；
    '\d\d\d'可以匹配'010'；
    '\w\w\d'可以匹配'py3'；
.可以匹配任意字符，所以：
    'py.'可以匹配'pyc'、'pyo'、'py!'等等。
要匹配变长的字符，在正则表达式中，
    用*表示任意个字符（包括0个），
    用+表示至少一个字符，
    用?表示0个或1个字符，
    用{n}表示n个字符，用{n,m}表示n-m个字符
    \d{3}表示匹配3个数字，例如'010'；
    \s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
    \d{3,8}表示3-8个数字，例如'1234567'。
========
进阶
========
为了做更精确地匹配，可以用[]表示范围，比如：
    [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
    [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
    [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
    [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
    A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
    ^表示行的开头，^\d表示必须以数字开头。
    $表示行的结束，\d$表示必须以数字结束。
    你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。
'''
# re模块
'''
    Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\转义，所以要特别注意。所以建议
    使用Python的r前缀，就不用考虑转义了。
    如何是用正则表达式判断是否匹配：

# ================================
import re
if re.match(r'^\d{3}\-\d{3,8}$','010-12345'):
    print('ok')
else:
    print("failed")
# ================================
# match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。
''' 
# 切分字符串
'''
    用正则表达式切分字符串比用固定的字符更灵活。
    
    re.split()
'''
# 分组
'''
    除了简单地判断是否匹配之外，正则表达式还是有提取子串的强大功能。用()表示的就是要提取的分组Group。
# =======================================
>>> m=re.match(r'^(\d{3})-(\d{3,8})','010-123415')
>>> m
<re.Match object; span=(0, 10), match='010-123415'>
>>> m.group(0)
'010-123415'
>>> m.group(1)
'010'
>>> m.group(2)
'123415'
>>> m.group()
'010-123415'
# =======================================
    如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。注意到group(0)永远是原始字符串，group(1),group(2)......
    代表1，2，......个子串。
'''
# 贪婪匹配
'''
    最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。、
    由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了，必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，
    加个?就可以让\d+采用非贪婪匹配。
# =========================================
>>> re.match(r'^(\d+)(0*)$','102300').groups()
('102300', '')
# =========================================
>>> re.match(r'^(\d+?)(0*)$','102300').groups()
('1023', '00')
# =========================================
'''
# 编译
'''
    当我们在Python中使用正则表达式时，re模块内部会干两件事情：
        1、编译正则表达式，如果正则表达式的字符串本身不合法，就会报错；
        2、用编译后的正则表达式去匹配字符串。
    如果一个正则表达式要重复使用几千次，出于效率，我们可以预编译该正则表达式，接下来重复使用时不需要编译这个步骤，直接匹配。
# =========================================、
import re
>>> re_telephone=re.compile(r'^(\d{3})-(\d{3,8})$')
>>> re_telephone.match('010-12341432').groups()
('010', '12341432')
>>> re_telephone.match('010-134235').groups()
('010', '134235')
# =========================================
    编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法是不用给出正则字符串。
'''
# 小结
'''
    正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果你经常遇到正则表达式的问题，你可能需要一本正则表达式的参考书。
'''