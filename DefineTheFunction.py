def fib(n):
    """Print a Fibonacci series up to n."""
    a,b = 0,1
    while a < n:
        print(a,end = '')
        a,b = b,a+b
    print()

# >>> def fib(n):
# ...     """Print a Fibonacci series up to n."""
# ...     a,b = 0,1
# ...     while a < n:
# ...             print(a,end = " ")
# ...             a,b = b,a+b
# ...     print()
# ...
# >>> fib(2000)
# 0       1       1       2       3       5       8       13      21      34      55      89
# 144     233     377     610     987     1597
# >>>
#----------------------
# 关键字def引入了一个函数定义。在其后必须跟有函数名和包括形式参数的圆括号。函数体语句从下一行开始，必须是缩进。
#
# 函数体的第一行语句可以是可选的字符串文本，这个字符串是函数的文档字符串，或者称为 docstring。
# 有些工具通过docstrings自动生成在线的或可打印的文档，或者让用户通过代码交互浏览；在代码中包含docstrings是一个好的实践。
#
# 函数调用会为函数局部变量生成一个新的符号表。确切的说，所有函数中的变量赋值都是将值存储在局部符号表中。
# 变量引用时首先在局部符号表中查找，然后是包含函数的局部符号表，然后是全局符号表，最后是内置名字表。
# 因此，全局变量不能再函数中直接赋值（除非用global语句命名），尽管可以被引用。
#
# 函数引用的实际参数在函数调用时引入局部符号表，因此，实参总是 传值调用（这里的值总是一个对象引用而不是该对象的值）。
# 一个函数被另一个函数调用时，一个新的局部符号表在调用过程中被创建。
#
# 一个函数定义会在当前符号表内引入函数名。函数名指代的值（即函数体），有一个被Python解释器认定为用户自定义函数的类型。
# 这个值可以赋予其他的名字（即变量名），然后它也可以被当做函数使用。
#----------------------
